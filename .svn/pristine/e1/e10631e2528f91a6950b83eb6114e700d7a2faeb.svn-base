
using HB.HotelRez.Models;
using Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;


namespace HB.HotelRez.Controllers
{
    public class HomeController : Controller
    {
        private static readonly DateTime UnixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult About()
        {
            ViewBag.Message = "Your application description page.";

            return View();
        }

        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }

        public ActionResult RoomMaster()
        {
            ViewBag.Message = "Room Master page.";

            return View();
        }

        public ActionResult HotelSupplier()
        {
            ViewBag.Message = "Hotel Supplier page.";

            return View();
        }



      [HttpPost]
        public JsonResult GetHotelSupplierData(HotelSupplierData hotelSupplierData)
        {
            try

            {
               HRZHotelSupplier hotelsupplier = new HRZHotelSupplier();


                hotelsupplier.HotelCode = hotelSupplierData.Code;
                hotelsupplier.HotelName = hotelSupplierData.Name;
                hotelsupplier.Address = hotelSupplierData.Address;
                hotelsupplier.StarRating = hotelSupplierData.Srating;
                hotelsupplier.ContactPerson = hotelSupplierData.Contactperson;
                hotelsupplier.Owner = hotelSupplierData.Owner;
                hotelsupplier.Email = hotelSupplierData.Email;
                hotelsupplier.Telephone = hotelSupplierData.Telephone;
                hotelsupplier.Latitude = hotelSupplierData.Lat;
                hotelsupplier.Longitude = hotelSupplierData.Long;
                hotelsupplier.Description = hotelSupplierData.Description;

                using (var db = new HBNEWEntities())
                {
                   
                    db.HRZHotelSuppliers.Add(hotelsupplier);
                    db.SaveChanges();
                    
                }

               

                return Json("Successfully Saved");

            }

            catch (Exception ex)
            {


                return Json("oOps! something went wrong");

            }
        }


        public ActionResult UserForm()
        {
            ViewBag.Message = "User Form page.";

            return View();
        }
        [HttpPost]
        public JsonResult GetUserFormData(UserFormData userFormData)
        {

            try

            {
                HRZUser user = new HRZUser();


                if (userFormData.UserType == "Admin")
                {
                    user.UserType = 1;
                }
                if (userFormData.UserType == "User")
                {
                    user.UserType = 2 ;
                }
                if (userFormData.UserType == "Guest")
                {
                    user.UserType = 3;
                }

                user.UserName = userFormData.UserName;
                user.PassWord = userFormData.Password;


                using (var db = new HBNEWEntities())
                {




                    db.HRZUsers.Add(user);
                    db.SaveChanges();



                }

                return Json("Successfully Saved");

            }

            catch (Exception ex)
            {


                return Json("oOps! something went wrong");

            }
        }



        public ActionResult RoomUnavailable()
        {
            try
            {
                UnabailableList rm = new UnabailableList();
                rm.Rooms = GetRoomId();
                return View(rm);


                // ViewBag.Message = "Room Unavailable Master page.";
                //  return View();



            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        public ActionResult AdminDashboard()
        {
            ViewBag.Message = "Admin Dashboard page.";

            return View();
        }
        public ActionResult Promotion()
        {
            ViewBag.Message = "Promotion page.";

            return View();
        }

        public ActionResult RoomPayment()
        {
            ViewBag.Message = " Room Payment page.";

            return View();
        }
        [HttpPost]
        public JsonResult SavePromotion(PromotionData promotiondata)
        {
            try {
                HRZPromotion promotionDb = new HRZPromotion();
                promotionDb.RoomID = promotiondata.RoomID;
                promotionDb.DateFrom = promotiondata.DateFrom;
                promotionDb.DateTo = promotiondata.DateTo;
                promotionDb.DiscountPercentage = promotiondata.DateTo;
                promotionDb.DiscountValue = promotiondata.DateTo;
                promotionDb.PromotionType = promotiondata.DateTo;

                using (var db = new HBNEWEntities())
                {

                    db.HRZPromotions.Add(promotionDb);
                    db.SaveChanges();

                }




            }
            catch (Exception ex) {


            }


            return Json("Successfully Saved");
        }



        [HttpPost]
        public JsonResult GetHotelRezData(HotelRezData hotelRezData)
        {

            try

            {
                using (var db = new HBNEWEntities())
                {

                    HRZRoomMaster roomaster = new HRZRoomMaster();

                    roomaster.Address = hotelRezData.Address;
                    roomaster.HotelName = hotelRezData.HotelName;
                    roomaster.RoomID = hotelRezData.RoomId;
                    roomaster.RoomType = hotelRezData.RoomType;
                    roomaster.Refference = hotelRezData.Refference;
                    roomaster.Price = hotelRezData.Price;
                    roomaster.BoardType = hotelRezData.BoardType;

                    db.HRZRoomMasters.Add(roomaster);
                    db.SaveChanges();

                    foreach (var aminity in hotelRezData.Aminitylist)
                    {
                        HRZAminity amminity = new HRZAminity();

                        amminity.RoomID = hotelRezData.RoomId;
                        amminity.Name = aminity;
                        db.HRZAminities.Add(amminity);

                    }
                    db.SaveChanges();

                    foreach (var nearbyplaces in hotelRezData.NearByPlaces)
                    {
                        HRZNearbyPlace nearbyplace = new HRZNearbyPlace();

                        nearbyplace.RoomID = hotelRezData.RoomId;
                        nearbyplace.NearbyName = nearbyplaces.name;
                        nearbyplace.NearbyDistance = nearbyplaces.distance;

                        db.HRZNearbyPlaces.Add(nearbyplace);

                    }
                    db.SaveChanges();

                }

                return Json("Successfully Saved");

            }

            catch (Exception ex)
            {


                return Json("oOps! something went wrong");

            }

        }

        [HttpPost]
        public JsonResult GetunAvailableDates(string roomID)
        {    

            return null;

        }
        [HttpPost]
        public JsonResult GetRoomBookingDetails(RoomBookingData roombookingdata)
        {
            try {
                using (var db = new HBNEWEntities())
                {
                    HRZRoomBooking rmbking = new HRZRoomBooking();
                    rmbking.RoomID = roombookingdata.RoomID;
                    rmbking.DateFrom = roombookingdata.DateFrom;
                    rmbking.DateTo = roombookingdata.DateTo;
                    rmbking.Adult1Address = roombookingdata.Adult1Address;
                    rmbking.Adult1Email = roombookingdata.Adult1Email;
                    rmbking.Adult1FirstName = roombookingdata.Adult1FirastName;
                    rmbking.Adult1LastName = roombookingdata.Adult1LastName;
                    rmbking.Adult1NICNo = roombookingdata.Adult1NICNo;
                    rmbking.Adult1Telephone = roombookingdata.Adult1Telephone;
                    rmbking.Adult2Address = roombookingdata.Adult2Address;
                    rmbking.Adult2Email = roombookingdata.Adult2Email;
                    rmbking.Adult2FirstName = roombookingdata.Adult2FirastName;
                    rmbking.Adult2LastName = roombookingdata.Adult2LastName;
                    rmbking.Adult2NICNo = roombookingdata.Adult2NICNo;
                    rmbking.Adult2Telephone = roombookingdata.Adult2Telephone;
                    rmbking.Adult3Address = roombookingdata.Adult3Address;
                    rmbking.Adult3Email = roombookingdata.Adult3Email;
                    rmbking.Adult3FirstName = roombookingdata.Adult3FirastName;
                    rmbking.Adult3LastName = roombookingdata.Adult3LastName;
                    rmbking.Adult3NICNo = roombookingdata.Adult3NICNo;
                    rmbking.Adult3Telephone = roombookingdata.Adult3Telephone;
                    rmbking.Adult4Address = roombookingdata.Adult4Address;
                    rmbking.Adult4Email = roombookingdata.Adult4Email;
                    rmbking.Adult4FirstName = roombookingdata.Adult4FirastName;
                    rmbking.Adult4LastName = roombookingdata.Adult4LastName;
                    rmbking.Adult4NICNo = roombookingdata.Adult4NICNo;
                    rmbking.Adult4Telephone = roombookingdata.Adult4Telephone;
                    rmbking.Chidl3Name = roombookingdata.Child3Name;
                    rmbking.Child3Age = roombookingdata.Child3Age;
                    rmbking.Chil21Name = roombookingdata.Child2Name;
                    rmbking.child2Age = roombookingdata.Child2Age;
                    rmbking.Child1Name = roombookingdata.Child1Name;
                    rmbking.Child1Age = roombookingdata.Child1Age;

                    db.HRZRoomBookings.Add(rmbking);
                    db.SaveChanges();

                }

                return Json("Successfully Saved");

            }
            catch (Exception ex) {

                return Json("oOps! something went wrong");
            }
           
        }


        public ActionResult BookingCancellation()
        {
            ViewBag.Message = "Booking Cancellation.";

            return View();
        }
        public ActionResult RoomBooking()
        {
            UnabailableList rmid = new UnabailableList();

            rmid.Rooms = GetRoomId();
            return View(rmid);
        }

        /// <summary>
        /// use to save unavailable date list
        /// </summary>
        /// <param name="unabailableList"></param>
        /// <returns>By Anu</returns>
        [HttpPost]
        public JsonResult SaveToDatabase(UnabailableList unabailableList)
        {
            try
            {

                string roomId = unabailableList.RoomID.Trim().ToString();
                using (var db = new HBNEWEntities())
                {
                    foreach (var item in unabailableList.UnavailableDates)
                    {

                        DateTime uDate = UnixTimeStampToDateTime(double.Parse(item.Trim().ToString().Substring(0, 10)));


                        db.HRZRoomUnavailables.Add(new HRZRoomUnavailable { RoomID = roomId, Date = uDate.ToShortDateString() });
                        db.SaveChanges();
                    }


                }

                return Json("Successfully Saved");
            }
            catch (Exception ex)
            {
                return Json("oOps! something went wrong");
            }
        }

        /// <summary>
        /// use to convert date from milisecond to date
        /// by Anu
        /// </summary>
        /// <param name="unixTimeStamp"></param>
        /// <returns></returns>
        public static DateTime UnixTimeStampToDateTime(double unixTimeStamp)
        {
            // Unix timestamp is seconds past epoch
            System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            dtDateTime = dtDateTime.AddSeconds(unixTimeStamp).ToLocalTime();
            return dtDateTime;
        }

        /// <summary>
        /// Use to get unavailable date list
        /// by Anu
        /// </summary>
        /// <param name="roomId"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult getUnavailableDateLst(string roomId)
        {
            try
            {

                UnabailableList x = new UnabailableList();
                x.Rooms = unAvailableDateLst(roomId);

               // var a = x.Rooms.Select(s => s.Text);

                return Json(x.Rooms.ToArray());
            }
            catch (Exception ex)
            {
                return Json("oOps! something went wrong");
            }
        }
        public static List<SelectListItem> unAvailableDateLst(string roomId)
        {
            try
            {

                List<SelectListItem> items = new List<SelectListItem>();
                using (var db = new HBNEWEntities())
                {

                    var unDate = db.HRZRoomUnavailables.Where(x => x.RoomID.Equals(roomId)).ToList();


                    foreach (var x in unDate)
                    {

                        
                        items.Add(new SelectListItem
                        {
                            Text = GetCurrentUnixTimestampMillis(DateTime.Parse(x.Date)).ToString()
                        });
                    }

                }

                return items;
            }
            catch (Exception ex)
            {

                throw;
            }

        }

        /// <summary>
        /// Use to convert date to milisecond
        /// by anu
        /// </summary>
        /// <param name="localDateTime"></param>
        /// <returns></returns>
        public static long GetCurrentUnixTimestampMillis(DateTime localDateTime)
        {
            DateTime univDateTime;           
            univDateTime = localDateTime.ToUniversalTime();
            return (long)(univDateTime - UnixEpoch).TotalMilliseconds;
        }

        [HttpPost]
        public JsonResult BookingList(RoomBookingData roomBookingData)
        {
            try
            {

                DateTime sDate = Convert.ToDateTime(roomBookingData.DateFrom.Trim());

               string date = sDate.ToShortDateString();
                using (var db = new HBNEWEntities())
                {
                    var bookingLst = db.HRZRoomBookings.Where(x => x.DateFrom.Equals(date) && x.IsActive == true).ToList();

                 
                    return Json(bookingLst);
                }
            }
            catch (Exception ex)
            {

                return Json("oOps! something went wrong");
            }
        }

        //[HttpGet]
        //public List<UnabailableList> GetRoomId()
        //{
        //    try
        //    {
        //        List<UnabailableList> unabailableList = new List<UnabailableList>();
        //        using (var db = new HBNEWEntities())
        //        {

        //            var roomid = db.HRZRoomMasters.Select(x => new
        //            {
        //                id = x.RoomId

        //            }).ToList();

        //            foreach (var x in roomid)
        //            {
        //                unabailableList.Add(new UnabailableList
        //                {
        //                    RoomID = x.id

        //                });
        //            }

        //        }


        //        return unabailableList;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}

        private static List<SelectListItem> GetRoomId()
        {
            try
            {

                List<SelectListItem> items = new List<SelectListItem>();
                using (var db = new HBNEWEntities())
                {

                    var roomid = db.HRZRoomMasters.Select(x => new
                    {

                        rId = x.RoomID

                    }).ToList();

                    foreach (var x in roomid)
                    {
                        items.Add(new SelectListItem
                        {
                            Text = x.rId

                        });
                    }

                }
                return items;
            }
            catch (Exception ex)
            {

                throw;
            }
        }
    }
}